<#
.SYNOPSIS
    PortGuardian - Windows Firewall Hardening Tool
.DESCRIPTION
    Automatically blocks all inbound/outbound traffic and creates allow-rules for critical apps.
.NOTES
    Version: 1.2
    Author: YourName
    Required: Run as Administrator!
#>

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
$ReportPath = "$env:USERPROFILE\Desktop\PortGuardian_Report_$(Get-Date -Format 'yyyyMMdd').html"
$Whitelist = @(
    "C:\Windows\System32\svchost.exe",
    "C:\Windows\explorer.exe",
    "C:\Program Files\Google\Chrome\Application\chrome.exe"
)

# --- –°—Ç–∏–ª–∏ –¥–ª—è HTML-–æ—Ç—á–µ—Ç–∞ ---
$HTMLHeader = @"
<!DOCTYPE html>
<html>
<head>
    <title>PortGuardian Report</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        h1 { color: #2c3e50; }
        .danger { background-color: #ffdddd; padding: 10px; border-left: 5px solid #f44336; }
        .success { background-color: #ddffdd; padding: 10px; border-left: 5px solid #4CAF50; }
        table { border-collapse: collapse; width: 100%; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
    </style>
</head>
<body>
    <h1>PortGuardian Firewall Report</h1>
    <p>Generated on: $(Get-Date)</p>
"@

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---
if (-NOT ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator") {
    Write-Host "ERROR: Run as Administrator!" -ForegroundColor Red
    exit 1
}

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ ---
$ReportContent = @()
$ReportContent += "<div class='danger'><h3>üö® Blocked All Inbound/Outbound Traffic</h3></div>"

# --- 1. –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–∞–≤–∏–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ---
Set-NetFirewallProfile -Profile Domain,Public,Private -DefaultInboundAction Block -DefaultOutboundAction Block
$ReportContent += "<p>‚úÖ Set default firewall policy to <b>BLOCK ALL</b> for all profiles.</p>"

# --- 2. –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–∞–∑—Ä–µ—à–∞—é—â–∏—Ö –ø—Ä–∞–≤–∏–ª ---
Get-NetFirewallRule | Where-Object { $_.Action -eq "Allow" } | Remove-NetFirewallRule
$ReportContent += "<p>üóëÔ∏è Removed <b>$( (Get-NetFirewallRule | Where-Object { $_.Action -eq "Allow" }).Count </b> allow rules.</p>"

# --- 3. –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞ ---
$ReportContent += "<div class='success'><h3>üõ°Ô∏è Whitelisted Applications</h3></div><table><tr><th>App</th><th>Rule Name</th></tr>"
foreach ($app in $Whitelist) {
    if (Test-Path $app) {
        $ruleName = "Allow_" + (Split-Path $app -Leaf).Replace(".exe", "")
        New-NetFirewallRule -DisplayName $ruleName -Direction Inbound -Program $app -Action Allow
        $ReportContent += "<tr><td>$app</td><td>$ruleName</td></tr>"
    }
}
$ReportContent += "</table>"

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ ---
$HTMLFooter = "</body></html>"
$HTMLHeader + ($ReportContent -join "") + $HTMLFooter | Out-File -FilePath $ReportPath -Encoding UTF8

# --- –§–∏–Ω–∞–ª ---
Write-Host "`nüî• Firewall hardened successfully!" -ForegroundColor Green
Write-Host "üìÑ Report saved to: $ReportPath" -ForegroundColor Cyan
Start-Process $ReportPath